from z3 import *
from pwn import *

base = (
    (-0x1, 0x00, 0x01, 0x03, 0x09, -0x1, -0x1, 0x05,
     -0x1, 0x0a, -0x1, 0x02, 0x08, -0x1, -0x1, 0x0e),
    (-0x1, -0x1, 0x0d, -0x1, 0x0a, 0x06, -0x1, -0x1,
     0x09, 0x04, -0x1, -0x1, -0x1, 0x03, -0x1, -0x1),
    (0x02, -0x1, 0x06, -0x1, 0x03, -0x1, -0x1, -0x1,
     0x05, 0x0d, -0x1, 0x01, -0x1, 0x0b, 0x0a, -0x1),
    (0x09, -0x1, 0x0b, -0x1, -0x1, 0x02, -0x1, -0x1,
     0x06, 0x0c, -0x1, -0x1, 0x0f, -0x1, -0x1, 0x05),
    (-0x1, -0x1, 0x04, 0x09, 0x0b, 0x0e, -0x1, -0x1,
     -0x1, -0x1, 0x02, 0x07, -0x1, 0x01, -0x1, 0x0d),
    (-0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1,
     0x04, -0x1, 0x09, 0x03, -0x1, -0x1, -0x1, -0x1),
    (-0x1, 0x0c, -0x1, -0x1, 0x0d, -0x1, 0x02, -0x1,
     0x0f, -0x1, -0x1, -0x1, 0x00, 0x09, 0x07, 0x04),
    (-0x1, -0x1, 0x07, 0x0f, -0x1, -0x1, -0x1, -0x1,
     -0x1, 0x01, 0x0d, -0x1, 0x06, 0x08, 0x05, -0x1),
    (-0x1, 0x0d, 0x05, 0x0b, 0x0f, 0x03, -0x1, 0x02,
     -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1, 0x06),
    (0x07, 0x08, 0x03, -0x1, -0x1, 0x0a, 0x0e, -0x1,
     -0x1, 0x0f, -0x1, -0x1, -0x1, -0x1, -0x1, -0x1),
    (-0x1, 0x02, -0x1, 0x01, 0x04, -0x1, 0x0d, 0x06,
     -0x1, -0x1, -0x1, 0x0b, 0x05, -0x1, 0x00, -0x1),
    (-0x1, -0x1, -0x1, 0x06, 0x0c, 0x0b, -0x1, 0x00,
     -0x1, 0x02, -0x1, 0x05, -0x1, 0x07, 0x03, 0x08),
    (0x08, -0x1, -0x1, -0x1, 0x02, 0x00, -0x1, 0x01,
     0x0c, -0x1, -0x1, 0x0d, -0x1, -0x1, -0x1, 0x09),
    (0x0d, -0x1, -0x1, -0x1, -0x1, -0x1, 0x03, 0x0f,
     0x0b, -0x1, -0x1, 0x04, 0x07, 0x00, 0x08, 0x0c),
    (0x0b, -0x1, -0x1, -0x1, -0x1, 0x09, 0x07, 0x0d,
     -0x1, 0x03, -0x1, -0x1, -0x1, -0x1, -0x1, 0x01),
    (-0x1, 0x0f, 0x00, 0x05, -0x1, -0x1, 0x0b, -0x1,
     -0x1, -0x1, -0x1, -0x1, 0x0d, 0x0a, -0x1, -0x1)
)


s = Solver()
X = [[Int(f"%x{i}_{j}") for j in range(16)] for i in range(16)]


cells_c = [And(0 <= X[i][j], X[i][j] < 0x10)
           for i in range(16) for j in range(16)]
rows_c = [Distinct(X[i]) for i in range(16)]
cols_c = [Distinct([X[i][j] for i in range(16)])
          for j in range(16)]

last_c = []
for i in range(16):
    v4 = i & 0xFFFFFFFC
    v5 = (i & 3) << 2
    for j in range(16):
        for k in range(j+1, 16):
            a = v5 + (j & 3) + 16 * (v4 + (j >> 2))
            ai = a % 16
            aj = a//16

            b = v5 + (k & 3) + 16 * (v4 + (k >> 2))
            bi = b % 16
            bj = b//16
            last_c.append(X[ai][aj] != X[bi][bj])

chall_c = []
chall_c += cells_c
chall_c += rows_c
chall_c += cols_c
chall_c += last_c

instance_c = [If(base[i][j] == -1,
                 True,
                 X[i][j] == base[i][j])
              for i in range(16) for j in range(16)]

s.add(chall_c)
s.add(instance_c)

if s.check() == sat:
    m = s.model()
    r = [[m.evaluate(X[i][j]) for j in range(16)]
         for i in range(16)]
    print_matrix(r)

    password = ""
    for i in range(16):
        for j in range(16):
            password += hex(int(str(r[i][j])))[2:] + "\n"

    t = process("./chiffre-unique")
    t.send(password)
    t.interactive()

else:
    print("failed to solve")
